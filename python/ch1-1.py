# 第 1 章 使用函数构建抽象
# 1.1 开始

# 所有计算都始于三点：
#   信息的表示、
#   处理的逻辑、
#   设计抽象来管理逻辑的复杂性，
# 掌握这些基础知识需要我们去精确理解计算机程序的构造和解释。

# 1.1.1 Python 编程

# 为了定义计算过程，我们需要一种被人们广泛使用和各类电脑广泛接受的编程语言，
# 在本文中，我们将主要使用 Python 语言。

# 这本书极力保留了 SICP 的精神：
# 通过抽象和严格的计算模型逐步介绍 Python 的特性。
# 此外，本书还提供了 Python 的编程实践，
# 括一些高级语言功能和说明示例。
# 随着阅读的进行，你会自然而然地增加使用 Python 的能力。

# 计算模型是计算机科学中的一个核心概念，
# 它描述了计算过程的抽象方式。
# 不同的计算模型适用于不同类型的问题和算法设计。
# SICP 书中介绍了以下计算模型
# 1. 递归模型
# 2. 迭代模型
# 3. 函数式编程模型
# 4. 面向对象编程模型
# 5. 逻辑编程模型
# 6. 并发模型
# 7. 流和惰性求值
# 8. 并行计算模型
# 9. 分布式计算模型
# 10. 约束传播模型

# 1.1.2 安装 Python 3
# 1.1.3 交互式会话

2+2

# 1.1.4 第一个例子

from urllib.request import urlopen
# 这个表达式将 urlopen 函数应用在了一个包含莎士比亚 37 部戏剧完整文本的 URL 上
shakespeare = urlopen('https://www.composingprograms.com/shakespeare.txt')
words = list(shakespeare.read().decode().split())
{w for w in words if len(w) == 6 and w[::-1] in words}
# {'redder', 'drawer', 'reward', 'diaper', 'repaid'}

# 1.1.5 错误

# 学着解释错误和找到错误的原因称为调试，
# 关于调试的一些指导原则是：
#   增量测试
#   隔离错误
#   检查你的假设
#   咨询别人