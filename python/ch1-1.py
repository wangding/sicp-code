# 第 1 章 使用函数构建抽象
# 1.1 开始

'''
所有计算都始于三点：
- 信息的表示
- 处理的逻辑
- 设计抽象来管理逻辑的复杂性
掌握这些基础知识需要我们去精确理解计算机程序的构造和解释
'''

# 1.1.1 Python 编程

'''
为了定义计算过程，我们需要一种被人们广泛使用和各类电脑广泛接受的编程语言
在本文中，我们将主要使用 Python 语言

这本书极力保留了 SICP 的精神：
通过抽象和严格的计算模型逐步介绍 Python 的特性。
此外，本书还提供了 Python 的编程实践，
包括一些高级语言功能和说明示例。
随着阅读的进行，你会自然而然地提升使用 Python 的能力。

计算模型是计算机科学中的一个核心概念，
它描述了计算过程的抽象方式。
不同的计算模型适用于不同类型的问题和算法设计。

SICP 书中介绍了以下计算模型：
1. 递归模型
2. 迭代模型
3. 函数式编程模型
4. 面向对象编程模型
5. 逻辑编程模型
6. 并发模型
7. 流和惰性求值
8. 并行计算模型
9. 分布式计算模型
10. 约束传播模型
11. 状态转移自动机模型
12. 遗传模型
13. 人工智能神经网络模型

上面的 1, 2 颗粒度有些小，可以并入其他模型
上面的 6, 8, 9 可能是一回事儿
目前我对 1-4 和 6, 8, 9 比较熟悉，其他的不太了解

其中，递归模型，肯定是递归函数，
而递归函数可以用在函数式编程模型，
也可以用在面向对象编程模型。

10 以后的是我自己补充的，不是 SICP 书上的。

一种计算模型不能解决所有问题。
每种计算模型都有自己擅长的领域，
关键是要知道什么情况用什么计算模型，
用对了计算模型，解决问题就成功一半了，
因为，用对了计算模型，问题就迎刃而解，
在合适的计算模型下，问题的求解会变简单

计算模型的选择一定要简单，
越简单越好，越复杂越糟糕，
对象如果能简化为函数，
就不要面向对象，
一切以解决问题为目标，
而不是为了炫技或者某种信仰

计算模型没有好坏和优劣之分，
脑子里不要有框框和思维定式，
能简单且高效解决问题的计算模型就是好模型

编程语言的语法也类似，
不必非要使用高级语法，
显得自己很高明或水平很高，
只在适合使用高级语法的时候才使用高级语法，
而不是不论时间和场合都乱用一气

函数式编程适合无状态的场合，
或者有明确输入和输出的场合，
例如：数值计算和信息格式转换，等

面向对象编程适合有状态的场合，
或者用来定义复合数据结构的场合，
尤其适合对现实环境或复杂环境的模拟和仿真

面向对象和函数式可以结合，
例如，用面向对象描述复合数据结构
用函数式完成复合数据的处理或计算
'''

# 1.1.2 安装 Python 3
# 1.1.3 交互式会话

2+2

# 1.1.4 第一个例子

from urllib.request import urlopen
# 这个表达式将 urlopen 函数应用在了一个包含莎士比亚 37 部戏剧完整文本的 URL 上
shakespeare = urlopen('https://www.composingprograms.com/shakespeare.txt')
words = list(shakespeare.read().decode().split())
{w for w in words if len(w) == 6 and w[::-1] in words}
# {'redder', 'drawer', 'reward', 'diaper', 'repaid'}

# 1.1.5 错误

'''
学着解释错误和找到错误的原因称为调试，
关于调试的一些指导原则是：
- 增量测试
- 隔离错误
- 检查你的假设
- 咨询别人

错误的三种类型：
- 语法错误
- 逻辑错误
- 运行时错误

node.js 应用开发课程和前端性能与工程化课程
中关于单元测试的内容里有详细的介绍
'''